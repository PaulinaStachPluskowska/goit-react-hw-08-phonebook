{"version":3,"file":"static/js/743.eb5271b4.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-08-phonebook/./src/components/ContactForm/ContactForm.module.css?b5b2","redux/Selectors.jsx","components/ContactForm/ContactForm.jsx","webpack://goit-react-hw-08-phonebook/./src/components/ContactList/ContactList.module.css?1ce0","webpack://goit-react-hw-08-phonebook/./src/components/Contact/Contact.module.css?03fd","components/Contact/Contact.jsx","components/ContactList/ContactList.jsx","webpack://goit-react-hw-08-phonebook/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","webpack://goit-react-hw-08-phonebook/./src/pages/Contacts/ContactsPage.module.css?3d45","pages/Contacts/ContactsPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"Form\":\"ContactForm_Form__IBmOq\",\"Label\":\"ContactForm_Label__ykus5\",\"Input\":\"ContactForm_Input__+bOEZ\",\"Button\":\"ContactForm_Button__jJDZH\"};","// import { createSelector } from \"@reduxjs/toolkit\";\n\nexport const selectContacts = state => state.contacts.items;\nexport const selectFilter = state => state.filter;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\n\n// export const selectVisibleItems = createSelector([selectContacts, selectFilter], (contacts, filter) => {\n//     // if (filter === '') return contacts;\n//         const array = contacts.filter(contact => {\n//             const filtered = filter.toLowerCase();\n//             return contact.name.toLowerCase().includes(filtered);\n//         });\n//         return array;\n//     }\n// );\n","import PropTypes from 'prop-types';\nimport css from './ContactForm.module.css';\nimport React from 'react';\nimport { nanoid } from 'nanoid';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/Selectors';\nimport Notiflix from 'notiflix';\nimport { addContact } from 'redux/Operators';\n\nexport const ContactForm = () => {\n\n  const elementID = nanoid();\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    const form = event.currentTarget;\n    const newContact = {\n      id: nanoid(),\n      name: form.name.value,\n      number: form.number.value,\n    };\n\n    let isContact;\n    let isNumber;\n   \n    contacts.forEach(contact => {\n      if (contact.name.toLowerCase() === newContact.name.toLowerCase()) {\n        isContact = true;\n      }\n      if (contact.number.toLowerCase() === newContact.number.toLowerCase()) {\n        isNumber = true;\n       }\n    });\n\n    if (isContact) {\n      Notiflix.Notify.warning(`${newContact.name} is already in contacts.`, {\n        position: 'center-top',\n        closeButton: true,\n        timeout: 500,\n        width: '350px',\n      });\n      form.reset();\n    } else if (isNumber) {\n      Notiflix.Notify.warning(`The number: ${newContact.number} is already in contacts.`, {\n        position: 'center-top',\n        closeButton: true,\n        timeout: 500,\n        width: '350px',\n      });\n      form.reset();\n    } else {\n      dispatch(addContact(newContact));\n      Notiflix.Notify.success(`${newContact.name} was added to your contacts.`, {\n        position: 'center-top',\n        closeButton: true,\n        timeout: 500,\n        width: '350px',\n      });\n      form.reset();\n    }\n  };\n\n    return (\n        <form className={css.Form} htmlFor={elementID} onSubmit={handleSubmit}>\n            <label className={css.Label}>\n                Name\n                <input className={css.Input} id={elementID}\n                  type=\"text\"\n                  name=\"name\"\n                  pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                  title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                  required\n                />\n            </label>\n            <label className={css.Label}>\n                Number\n                <input className={css.Input}\n                  type=\"tel\"\n                  name=\"number\"\n                  pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                  title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                  required\n                />\n            </label>\n            <button className={css.Button} type=\"submit\">\n                Add contact\n            </button>\n        </form>\n    );\n};\n\nContactForm.propTypes = {\n  contacts: PropTypes.arrayOf(PropTypes.objectOf(PropTypes.string)),\n  addContact: PropTypes.func,\n};\n\nexport default ContactForm;","// extracted by mini-css-extract-plugin\nexport default {\"List\":\"ContactList_List__gG+lN\",\"Item\":\"ContactList_Item__Yiq5T\",\"Name\":\"ContactList_Name__ieVym\",\"Number\":\"ContactList_Number__CneWV\",\"Button\":\"ContactList_Button__3O5wR\"};","// extracted by mini-css-extract-plugin\nexport default {\"Name\":\"Contact_Name__cV3PW\",\"Number\":\"Contact_Number__y7LNF\",\"Button\":\"Contact_Button__SD4ol\"};","import React from 'react';\nimport css from './Contact.module.css';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/Operators';\n\nconst Contact = ({ contact }) => {\n  const dispatch = useDispatch();\n\n  const handleDelete = () => {\n    dispatch(deleteContact(contact.id));\n  };\n\n\n  return (\n    <li>\n      <p className={css.Name}>\n        {contact.name}:\n      </p>\n      <p className={css.Number}>\n        {contact.number}  \n      </p>\n      <button className={css.Button} type=\"button\" onClick={handleDelete}>\n        Delete\n      </button>\n    </li>\n  );\n};\n\n\nexport default Contact;\n\nContact.propTypes = {\n  contact: PropTypes.objectOf(PropTypes.string),\n  deleteContact: PropTypes.func,\n};\n\n","import React from 'react';\nimport css from './ContactList.module.css';\nimport Contact from 'components/Contact/Contact';\nimport { useSelector } from 'react-redux';\nimport { selectContacts, selectFilter, selectIsLoading/*, selectVisibleItems*/} from 'redux/Selectors';\nimport Loader from 'components/Loader/Loader';\n\nconst ContactList = () => {\n  const isLoading = useSelector(selectIsLoading);\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n\n  const visibleContacts = contacts.filter(contact => contact.name.toLowerCase().includes(filter.toLowerCase()));\n\n  return (\n      <ul className={css.List}>\n          { !!isLoading && <Loader />}\n              {visibleContacts.map(contact => (\n                  <Contact key={contact.id} contact={contact} />\n          ))}\n      </ul>\n    );\n};\n\nexport default ContactList;","// extracted by mini-css-extract-plugin\nexport default {\"Container\":\"Filter_Container__2veh+\",\"Label\":\"Filter_Label__MldcW\",\"Input\":\"Filter_Input__fqOVl\"};","import { nanoid } from '@reduxjs/toolkit';\nimport css from './Filter.module.css';\nimport React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { handleFilter } from 'redux/FilterSlice';\nimport PropTypes from 'prop-types';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const filterId = nanoid();\n\n  const handleChange = event => {\n    dispatch(handleFilter(event.currentTarget.value));\n  };\n\n  return (\n      <div className={css.Container}>\n          <label className={css.Label}>\n              Find contacts by Name\n              <input className={css.Input}\n                type=\"text\"\n                name=\"filter\"\n                id={filterId}\n                onChange={handleChange}\n              />\n          </label>\n      </div>\n    );\n};\n\nexport default Filter;\n\nFilter.propTypes = {\n  onChange: PropTypes.func,\n};","// extracted by mini-css-extract-plugin\nexport default {\"Container\":\"ContactsPage_Container__zN08M\",\"Header\":\"ContactsPage_Header__3FkpW\",\"SecondHeader\":\"ContactsPage_SecondHeader__ATmsy\"};","import ContactForm from \"components/ContactForm/ContactForm\";\nimport ContactList from \"components/ContactList/ContactList\";\nimport Filter from \"components/Filter/Filter\";\nimport Loader from \"components/Loader/Loader\";\nimport { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { selectError, selectIsLoading } from \"redux/Selectors\";\nimport { fetchContacts } from \"redux/Operators\";\nimport css from './ContactsPage.module.css';\nimport { Helmet } from \"react-helmet\";\n\n\nconst ContactsPage = () => { \n    const dispatch = useDispatch();\n    const isLoading = useSelector(selectIsLoading);\n    const error = useSelector(selectError);\n\nuseEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet className={css.Container}>\n        <h1 className={css.Header}>Phonebook</h1>\n      </Helmet>\n      <ContactForm />\n      <h2 className={css.SecondHeader}>Contacts</h2>\n      <Filter />\n      {!!isLoading && !error ? <Loader /> : <ContactList />}\n    </>\n    );\n};\n\nexport default ContactsPage;"],"names":["selectContacts","state","contacts","items","selectFilter","filter","selectIsLoading","isLoading","selectError","error","elementID","nanoid","dispatch","useDispatch","useSelector","className","css","htmlFor","onSubmit","event","preventDefault","isContact","isNumber","form","currentTarget","newContact","id","name","value","number","forEach","contact","toLowerCase","Notiflix","position","closeButton","timeout","width","reset","addContact","type","pattern","title","required","onClick","deleteContact","visibleContacts","includes","Loader","map","filterId","onChange","handleFilter","useEffect","fetchContacts","Helmet"],"sourceRoot":""}